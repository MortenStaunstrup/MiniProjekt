@page "/opretannoncer"
@inject NavigationManager navMan
@using System.Buffers.Text
@using MiniProjektGenbrug.Services.Interfaces
@inject IProductService ProductService
@using Core

<h3>Tilføj ny annonce</h3>

@if (model != null)
{
    <EditForm EditContext="EditContext" OnSubmit="AddAd">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-grid">
            <div class="form-item">
                <label>Pris:</label>
                <InputNumber TValue="double" placeholder="Indsat pris.." @bind-Value="model.Price" />
            </div>

            <div class="form-item">
                <label>Varenavn:</label>
                <InputText placeholder="Varenavn.." @bind-Value="model.Productname" />
            </div>

            <div class="form-item">
                <label>Lokale:</label>
                <InputSelect @bind-Value="model.RoomName">
                    <option disabled selected>Vælg lokale</option>
                    @foreach (var r in Room)
                    {
                        <option>@r</option>
                    }
                </InputSelect>
            </div>

            <div class="form-item">
                <label>Kategori:</label>
                <InputSelect @bind-Value="model.Category">
                    <option disabled selected>Vælg kategori</option>
                    @foreach (var c in Categories)
                    {
                        <option>@c</option>
                    }
                </InputSelect>
            </div>

            <div class="form-item">
                <label>Farve:</label>
                <InputText @bind-Value="model.Color" />
            </div>

            <div class="form-item">
                <label>Størrelse:</label>
                <InputSelect @bind-Value="model.Size">
                    <option disabled selected>Vælg størrelse</option>
                    @foreach (var s in Sizes)
                    {
                        <option>@s</option>
                    }
                </InputSelect>
            </div>

            <div class="form-item full-width">
                <label>Beskrivelse:</label>
                <InputTextArea @bind-Value="model.Description" />
            </div>

            <div class="form-item">
                <label>Billede:</label>
                <InputFile OnChange="HandleImageUpload" accept=".jpg,.jpeg,.png" />
            </div>

            <div class="form-item">
                <button type="submit">Tilføj annonce</button>
            </div>
        </div>
    </EditForm>
}

@code {
    private Product model;
    private EditContext EditContext;

    private byte[] pictureBytes;
    
    private List<string> Room = new() { "A101", "A102", "A103", "A104", "A105", "A106", "A107", "A108", "A109", "A110" };
    private List<string> Categories = new() { "Bukser", "T-shirt", "Sko", "Sweater", "Nederdel", "Kjole", "Jakke" };

    private List<string> ClothingSizes = new() { "XS", "S", "M", "L", "XL", "XXL", "XXXL"};
    private List<string> ShoeSizes = new() { "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46" };

    private List<string> Sizes => model.Category == "Sko" ? ShoeSizes : ClothingSizes;

    protected override async Task OnInitializedAsync()
    {
        model = new Product();
        EditContext = new EditContext(model);
    }

    private async Task AddAd()
    {
        model.Status = "Available";
        model.BuyerId = null;
        if (EditContext.Validate())
        {
            ProductService.AddProduct(model);
            Console.WriteLine("Annonce tilføjet:");
            Console.WriteLine($"{model.Productname} - {model.Price} - {model.Category}");

            navMan.NavigateTo("/alleannoncer");
        }
        else
        {
            Console.WriteLine("Annonce fejlet");
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            pictureBytes = memoryStream.ToArray();
            model.Picture = Convert.ToBase64String(pictureBytes);
        }
    }
    
}
