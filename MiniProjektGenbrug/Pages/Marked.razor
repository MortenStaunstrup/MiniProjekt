@page "/marked"
@using Core
@using Services.Interfaces
@inject IProductService _ProductService
@inject IRoomService roomService
@inject NavigationManager navMan
@inject IUserService loginService
<!--inject ICartService cartService-->
@inject Blazored.LocalStorage.ILocalStorageService localstorage


<PageTitle>Marked</PageTitle>

<h1>Marked</h1>

@if (_filteredProducts == null)
{
    <p>Loading marked...</p>
}
else
{
    <div class="input-group mb-3">
        <InputText @bind-Value="SearchText" placeholder="Søg..." class="form-control" />

        <InputSelect @bind-Value="SelectedCategory" class="form-select">
            <option value="">Alle kategorier</option>
            @foreach (var cat in _products.Where(p => !string.IsNullOrEmpty(p.Category)).Select(p => p.Category).Distinct())
            {
                <option value="@cat">@cat</option>
            }
        </InputSelect>

        <InputSelect @bind-Value="SelectedColor" class="form-select">
            <option value="">Alle farver</option>
            @foreach (var col in _products.Where(p => !string.IsNullOrEmpty(p.Color)).Select(p => p.Color).Distinct())
            {
                <option value="@col">@col</option>
            }
        </InputSelect>

        <InputSelect @bind-Value="SelectedSize" class="form-select">
            <option value="">Alle størrelser</option>
            @foreach (var sz in _products.Where(p => !string.IsNullOrEmpty(p.Size)).Select(p => p.Size).Distinct())
            {
                <option value="@sz">@sz</option>
            }
        </InputSelect>

        <InputNumber @bind-Value="MinPrice" class="form-control" placeholder="Min pris" />
        <InputNumber @bind-Value="MaxPrice" class="form-control" placeholder="Max pris" />
        <button class="btn btn-primary" @onclick="Search">Filtrer</button>
    </div>

    <div class="altindhold">
        @foreach (var article in _filteredProducts)
        {
            if (article.Status != "Gennemført")
            {
                <div class="indholdprvare" @onclick="() => OpenModal(article)" style="cursor: pointer;">
 
                    <div class="DivPic">
                        <img src="@(article.PictureSrc ?? "sample-data/noImgAvailable.png")" alt="Billede af vare" />
                    </div>
                    <div class="tekstdiv">
                        <span>@article.Productname</span>
                        <span>@article.Size - @article.Color</span>
                        <span>Status: @article.Status</span>
                        <span>@article.RoomName</span>
                        <span>@article.Price,- DKK</span>
                    </div>
                </div>
            }
        }
    </div>
}


@if (showModal && selectedProduct != null)
{
    <div class="modal-backdrop" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                <button class="btn btn-danger" @onclick="CloseModal">Luk</button>
                <!--
                <button class="btn btn-success" @onclick="() => AddToCart(selectedProduct)">Tilføj til kurv</button>
            </div>
                -->
                <h2>@selectedProduct.Productname</h2>
                <img src="@(selectedProduct.PictureSrc ?? "sample-data/noImgAvailable.png")" alt="Billede af vare" style="width: 100%; height: auto;"/>
                <p>Størrelse: @selectedProduct.Size</p>
                <p>Farve: @selectedProduct.Color</p>
                <p>Pris: @selectedProduct.Price,- DKK</p>
                <p>Rum: @selectedProduct.RoomName</p>
                <p>Status: @selectedProduct.Status</p>
            </div>
        </div>
        }

        <style>
.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.6);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: white;
    padding: 20px;
    border-radius: 8px;
    max-width: 500px;
    width: 90%;
    max-height: 90%;
    overflow-y: auto;
    position: relative;
}
</style>

        @code {

    private string SearchText;
    private string SelectedCategory = "";
    private string SelectedColor = "";
    private string SelectedSize = "";
    private decimal? MinPrice = null;
    private decimal? MaxPrice = null;

    private List<Product> _products;
    private List<Product> _filteredProducts;
    private User? currentUser;
    bool showModal = false;
    Product shownProduct;
    bool exist;

    private Product selectedProduct;
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await localstorage.GetItemAsync<User>("user");
        _products = await _ProductService.GetAllProducts();
        _filteredProducts = _products;

        foreach (var p in _products)
        {
            if (p.Picture != null)
                p.PictureSrc = $"data:image/gif;base64,{p.Picture}";
        }
    }

    private void Search()
    {
        _filteredProducts = _products
            .Where(x => string.IsNullOrWhiteSpace(SearchText) ||
                        x.Productname.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
                        x.Category?.Contains(SearchText, StringComparison.OrdinalIgnoreCase) == true ||
                        x.Color?.Contains(SearchText, StringComparison.OrdinalIgnoreCase) == true)
            .Where(x => string.IsNullOrWhiteSpace(SelectedCategory) || x.Category == SelectedCategory)
            .Where(x => string.IsNullOrWhiteSpace(SelectedColor) || x.Color == SelectedColor)
            .Where(x => string.IsNullOrWhiteSpace(SelectedSize) || x.Size == SelectedSize)
            .Where(x => !MinPrice.HasValue || x.Price >= (double)MinPrice.Value)
            .Where(x => !MaxPrice.HasValue || x.Price <= (double)MaxPrice.Value)
            .ToList();
    }

    private void OpenModal(Product product)
    {
        selectedProduct = product;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }
<!--
    private async Task AddToCart(Product product)
    {
        if (currentUser == null)
            return;

        var user = await loginService.GetUserById(currentUser.id);
        if (user == null)
            return;

        var cartItem = new CartItem
        {
            Product = product,
            UserId = user.id,
            antal = 1         
        };
        
        await cartService.AddProductToCartAsync(user.id, product);

        
        await localstorage.SetItemAsync("user", user);
        currentUser = user;
        showModal = false;
    }


    private void BidOnProduct()
    {
        _ProductService.BidOnProduct(shownProduct.id, currentUser.id);
        navMan.NavigateTo("mineindkob");
    }

    private async void OpenItem(Product product)
    {
        shownProduct = product;
        OpenModal();
        exist = await _ProductService.ExistsInOwnProducts(shownProduct.id, currentUser.id);
        StateHasChanged();
    }
    
    private void CloseModal()
    {
        showModal = false;
    }

    private void OpenModal()
    {
        showModal = true;
    }

}
