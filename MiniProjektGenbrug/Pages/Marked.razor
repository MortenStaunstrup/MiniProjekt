@page "/marked"
@using Core
@using Services.Interfaces
@inject IProductService _ProductService
@inject NavigationManager navMan
@inject IUserService loginService
@inject IRoomService IRoomService
@inject Blazored.LocalStorage.ILocalStorageService localstorage

<PageTitle>Marked</PageTitle>

<h1>Marked</h1>
@if (_products == null)
{
    <p>Loading your marked...</p>
}
else
{
    <div class="input-group mb-3">
        <button class="btn btn-outline-secondary" type="button" id="button-addon1">Søg</button>
        <input type="text" class="form-control" placeholder="" aria-label="Example text with button addon" aria-describedby="button-addon1">
    </div>
    
    <div class="altindhold">
        
        @foreach (var article in _products)
            // @onclick="() => showModal = true" --!> til indholdprvare
        {
            @if (article.Status != "Gennemført")
            {
                <div class="indholdprvare">
                    <div class="DivPic">
                        <img src="@article.Picture" alt="Billede af vare">
                    </div>
                    <div class="tekstdiv">
                        <span>@article.Productname</span>
                        <span>@article.Size - @article.Color</span>
                        <span> Status: @article.Status</span>
                        <span>@(roomNames.TryGetValue(article.id, out var roomName) ? roomName : "Loading...")</span>
                        <span> @article.Price,- DKK</span>
                 
                    </div>
                </div>
            }
        }

    </div>
}

@code {

    private List<Product> _products;
    private User? currentUser;
    private Dictionary<int, string> roomNames = new Dictionary<int, string>();

    protected override async Task OnInitializedAsync()
    {

        currentUser = await localstorage.GetItemAsync<User>("user");
        _products = await _ProductService.GetAllProducts();
        
        foreach (var article in _products)
        {
            if (article.Status != "Gennemført")
            {
                roomNames[article.id] = await GetRoomName(article.id);
            }
        }
        
    }
    /*
        if (currentUser == null)
        {
            navMan.NavigateTo("login");
        }
        else
        {
            _products = _ProductService.GetProductsById().ToArray();
        }
    }
*/

    private async Task ReturnProduct(int id)
    {
        if (currentUser != null)
        {
            _products = await _ProductService.GetAllProducts(); // Opdatere tøjet
        }
    }

    private async Task<string> GetRoomName(int id)
    {
        Room room = await IRoomService.GetRoomById(id);
        return room.Name;
    }
}