@page "/marked"
@using Core
@using Services.Interfaces
@inject IProductService _ProductService
@inject IRoomService roomService
@inject NavigationManager navMan
@inject IUserService loginService
@inject IRoomService IRoomService
@inject Blazored.LocalStorage.ILocalStorageService localstorage

<PageTitle>Marked</PageTitle>

<h1>Marked</h1>

@if (_filteredProducts == null)
{
    <p>Loading marked...</p>
}
else
{
    
    <div class="input-group mb-3" style="width: 30%">
        <button class="btn btn-outline-secondary" type="button" id="button-addon1" @onclick="Search">Søg</button>
        <InputText @bind-Value="@SearchText" type="text" class="form-control" placeholder="" aria-label="Example text with button addon" aria-describedby="button-addon1"></InputText>

    </div>

    <div class="altindhold">
        @foreach (var article in _filteredProducts)
        {
            if (article.Status != "Gennemført")
            {
                <div class="indholdprvare" @onclick="() => OpenItem(article)">
                    <div class="DivPic">
                        <img src="@(article.PictureSrc ?? "sample-data/noImgAvailable.png")" alt="Billede af vare" />
                    </div>
                    <div class="tekstdiv">
                        <span>@article.Productname</span>
                        <span>@article.Size - @article.Color</span>
                        <span>Status: @article.Status</span>
                        <span>@article.RoomName</span>
                        <span>@article.Price,- DKK</span>
                    </div>
                </div>
            }
        }
    </div>
}

@if (showModal)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <button class="close-button" @onclick="CloseModal">X</button>
            
            @if (currentUser == null)
            {
                <p>Please login to bid on this product</p>
            }
            else
            {
                <h3>@shownProduct.Productname</h3>
                <p>Price: @shownProduct.Price</p>
                <p>Kan findes i lokale: @shownProduct.RoomName</p>
                
                @if (!exist)
                {
                    <button @onclick="BidOnProduct">Byd på vare?</button>
                }
                else
                {
                    <p>You own this product</p>
                }
            }
        </div>
    </div>
}

@code {
    private string SearchText;
    private string SelectedCategory = "";
    private string SelectedColor = "";
    private string SelectedSize = "";
    private decimal? MinPrice = null;
    private decimal? MaxPrice = null;

    private List<Product> _products;
    private List<Product> _filteredProducts;
    private User? currentUser;
    bool showModal = false;
    Product shownProduct;
    bool exist;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await localstorage.GetItemAsync<User>("user");
        _products = await _ProductService.GetAllProducts();
        _filteredProducts = _products;

        foreach (var p in _products)
        {
            if (p.Picture != null)
                p.PictureSrc = $"data:image/gif;base64,{p.Picture}";
        }
    }

    private void Search()
    {
        _filteredProducts = _products
            .Where(x => string.IsNullOrWhiteSpace(SearchText) ||
                        x.Productname.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
                        x.Category.Contains(SearchText, StringComparison.OrdinalIgnoreCase) ||
                        x.Color.Contains(SearchText, StringComparison.OrdinalIgnoreCase))
            .Where(x => string.IsNullOrWhiteSpace(SelectedCategory) || x.Category == SelectedCategory)
            .Where(x => string.IsNullOrWhiteSpace(SelectedColor) || x.Color == SelectedColor)
            .Where(x => string.IsNullOrWhiteSpace(SelectedSize) || x.Size == SelectedSize)
            .Where(x => !MinPrice.HasValue || x.Price >= (double)MinPrice.Value)
            .Where(x => !MaxPrice.HasValue || x.Price <= (double)MaxPrice.Value)
            .ToList();

        StateHasChanged();
    }

    private async Task ReturnProduct(int id)
    {
        if (currentUser != null)
        {
            _products = await _ProductService.GetAllProducts(); // Opdaterer tøjet
        }
    }

    private void BidOnProduct()
    {
        _ProductService.BidOnProduct(shownProduct.id, currentUser.id);
        navMan.NavigateTo("mineindkob");
    }

    private async void OpenItem(Product product)
    {
        shownProduct = product;
        OpenModal();
        if(currentUser != null)
            exist = await _ProductService.ExistsInOwnProducts(shownProduct.id, currentUser.id);
        StateHasChanged();
    }
    
    private void CloseModal()
    {
        showModal = false;
    }

    private void OpenModal()
    {
        showModal = true;
    }
    
}
