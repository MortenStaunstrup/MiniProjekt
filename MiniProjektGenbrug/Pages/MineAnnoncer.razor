@page "/mineannoncer"
@using Blazored.LocalStorage
@using Core
@using MiniProjektGenbrug.Services.Interfaces
@inject IUserService userService
@inject NavigationManager navMan
@inject ILocalStorageService localStorage
@inject IProductService productService
@inject IRoomService roomService

<PageTitle>Dine Annoncer</PageTitle>

@if (_dineAnnoncer == null)
{
    <p><i>...loading dine annoncer</i></p>
}
else
{
    <button class="Tilføj" @onclick="() => showModal = true"><span>Tilføj ny vare</span></button>

    <div class="Mineannoncer">
        @foreach (var annonce in _dineAnnoncer)
        {
            <div class="indholdprvare">
                <div class="Divpic">
                    <img src="@annonce.PictureSrc" alt="Picture of Item" />
                </div>
                <div class="Tekstdiv">
                    <span>@annonce.Productname</span>
                    <span>Status: @annonce.Status</span>
                    <span>@annonce.Category</span>
                    <span>@annonce.Color</span>
                    <span>@annonce.Size</span>
                    <span>@annonce.Description</span>
                    <span>@annonce.Price,- DKK</span>
                    <div id="knapper">
                        <button id="RedigereKnap" @onclick="() => UpdateAnnonce(annonce)">Rediger</button>
                        <button id="SletKnap" @onclick="() => DeleteAnnonce(annonce.id)">Slet</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (showModal)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <button class="close-button" @onclick="CloseModal">X</button>

            <h3>Tilføj ny annonce</h3>

            <EditForm EditContext="EditContext" OnSubmit="AddAd">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-grid">
                    <div class="form-item">
                        <label>Pris:</label>
                        <InputNumber TValue="double" placeholder="Indsat pris.." @bind-Value="model.Price" />
                    </div>

                    <div class="form-item">
                        <label>Varenavn:</label>
                        <InputText placeholder="Varenavn.." @bind-Value="model.Productname" />
                    </div>

                    <div class="form-item">
                        <label>Lokale:</label>
                        <InputSelect @bind-Value="model.RoomName">
                            <option disabled selected>Vælg lokale</option>
                            @foreach (var r in Room)
                            {
                                <option>@r</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-item">
                        <label>Kategori:</label>
                        <InputSelect @bind-Value="model.Category">
                            <option disabled selected>Vælg kategori</option>
                            @foreach (var c in Categories)
                            {
                                <option>@c</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-item">
                        <label>Farve:</label>
                        <InputText @bind-Value="model.Color" />
                    </div>

                    <div class="form-item">
                        <label>Størrelse:</label>
                        <InputSelect @bind-Value="model.Size">
                            <option disabled selected>Vælg størrelse</option>
                            @foreach (var s in Sizes)
                            {
                                <option>@s</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="form-item full-width">
                        <label>Beskrivelse:</label>
                        <InputTextArea @bind-Value="model.Description" />
                    </div>

                    <div class="form-item">
                        <label>Billede:</label>
                        <InputFile OnChange="HandleImageUpload" />
                    </div>

                    <div class="form-item">
                        <button type="submit">Tilføj annonce</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    User? currentUser;
    List<Product>? _dineAnnoncer;
    bool showModal = false;

    bool editing = false;
    private Product model;
    private EditContext EditContext;

    private byte[] pictureBytes;
    
    private List<string> Room = new List<string>();
    private List<string> Categories = new() { "Bukser", "T-shirt", "Sko", "Sweater", "Nederdel", "Kjole", "Jakke" };

    private List<string> ClothingSizes = new() { "XS", "S", "M", "L", "XL", "XXL", "XXXL"};
    private List<string> ShoeSizes = new() { "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46" };

    private List<string> Sizes => model.Category == "Sko" ? ShoeSizes : ClothingSizes;

    protected override async Task OnInitializedAsync()
    {
        model = new Product();
        EditContext = new EditContext(model);
        // Test kode
        var theUser = await userService.GetUserById(1);
        var theDataSavedInLocalstorage = new User()
        {
            id = theUser.id,
            Username = theUser.Username,
            Role = theUser.Role
        };
        //
        await localStorage.SetItemAsync("user", theDataSavedInLocalstorage);

        currentUser = await userService.GetUserLoggedIn();
        if (currentUser == null)
        {
            navMan.NavigateTo("login");
        }
        // Ændre kode til kun at vise produkter fra brugeren !!!
        _dineAnnoncer = await productService.GetAllProducts();
        foreach (var p in _dineAnnoncer)
        {
            if (p.Picture != null)
                p.PictureSrc = String.Format("data:image/gif;base64,{0}", p.Picture);
        }

        var rooms = await roomService.GetRooms();
        foreach (var r in rooms)
        {
            Room.Add(r.Name);
        }
    }

    private void DeleteAnnonce(int id)
    {
        productService.DeleteProductById(id);
        _dineAnnoncer.RemoveAll(x => x.id == id);
        StateHasChanged();
    }
    
    private void UpdateAnnonce(Product product)
    {
        editing = true;
        showModal = true;
        model = product;
        EditContext = new EditContext(model);
    }

    private void CloseModal() => showModal = false;

    private async Task AddAd()
    {
        model.Status = "Available";
        model.BuyerId = null;
        if (EditContext.Validate())
        {
            if (!editing)
            {
                productService.AddProduct(model);
                Console.WriteLine("Annonce tilføjet:");
                Console.WriteLine($"{model.Productname} - {model.Price} - {model.Category}");

                navMan.NavigateTo("/alleannoncer");
            }
            else
            {
                productService.UpdateProductById(model.id, model);
                Console.WriteLine("Product update");
                editing = false;
                CloseModal();
            }
        }
        else
        {
            Console.WriteLine("Annonce fejlet");
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            pictureBytes = memoryStream.ToArray();
            model.Picture = Convert.ToBase64String(pictureBytes);
        }
    }
    
}
